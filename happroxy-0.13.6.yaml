apiVersion: v1
kind: Namespace
metadata:
  name: ingress-haproxy
---
kind: ConfigMap
apiVersion: v1
data:
    backend-protocol: h2
    tls-alpn: h2,http/1.1
    use-htx: "true"
    dynamic-scaling: "true"
    backend-server-slots-increment: "4"
    http-port: "8080"
    https-port: "8443"
metadata:
  name: haproxy-configmap
  namespace: ingress-haproxy
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-serviceaccount
  namespace: ingress-haproxy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: haproxy-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingressclasses
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: haproxy-ingress-role
  namespace: ingress-haproxy
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: haproxy-ingress-role-nisa-binding
  namespace: ingress-haproxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: haproxy-ingress-role
subjects:
  - kind: ServiceAccount
    name: haproxy-ingress-serviceaccount
    namespace: ingress-haproxy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: haproxy-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: haproxy-ingress-serviceaccount
    namespace: ingress-haproxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: ingress-default-backend
  name: ingress-default-backend
  namespace: ingress-haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      run: ingress-default-backend
  template:
    metadata:
      labels:
        run: ingress-default-backend
    spec:
      containers:
        - name: ingress-default-backend
          image: gcr.io/google-containers/defaultbackend:1.4
          ports:
          - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          resources:
            limits:
              memory: 250Mi
            requests:
              cpu: 250m
              memory: 200Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: ingress-default-backend
  name: ingress-default-backend
  namespace: ingress-haproxy
spec:
  ports:
  - name: port-1
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: ingress-default-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: haproxy-ingress
  name: haproxy-ingress
  namespace: ingress-haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
      serviceAccountName: haproxy-ingress-serviceaccount
      containers:
      - name: haproxy-ingress
        image: ghcr.io/nirmata/haproxy-ingress:v0.13.6
        args:
        - --default-backend-service=$(POD_NAMESPACE)/ingress-default-backend
        - --default-ssl-certificate=$(POD_NAMESPACE)/tls-secret
        - --configmap=$(POD_NAMESPACE)/haproxy-configmap
        - --watch-ingress-without-class
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: stat
          containerPort: 1936
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10253
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10253
        resources:
          limits:
            memory: 100Mi
          requests:
            cpu: 10m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:                                                           
        - mountPath: /ingress-controller/ssl
          name: ingress-controller-ssl
        - mountPath: /ingress-controller/cacerts
          name: ingress-controller-cacerts
        - mountPath: /ingress-controller/crl
          name: ingress-controller-crl
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumes:
      - emptyDir: {}
        name: ingress-controller-ssl
      - emptyDir: {}
        name: ingress-controller-cacerts
      - emptyDir: {}
        name: ingress-controller-crl        
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: haproxy-ingress
  name: haproxy-ingress
  namespace: ingress-haproxy
spec:
  type: NodePort
  ports:
  - name: port-1
    port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 30080
  - name: port-2
    port: 8443
    protocol: TCP
    targetPort: 8443
    nodePort: 30443
  - name: port-3
    port: 1936
    protocol: TCP
    targetPort: 1936
    nodePort: 31936
  selector:
    run: haproxy-ingress

